// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  firstName String @db.VarChar(280)
  lastName  String @db.VarChar(280)
  password  String
  email     String @unique @db.VarChar(280)

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  user        User[]
  apisOnRoles ApisOnRoles[]
}

model Api {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  apisOnRoles ApisOnRoles[]
}

model Action {
  id     Int      @id @default(autoincrement())
  method String
  url    String
  date   DateTime

  userEmail String
}

model Place {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  parentPlaceId Int?
  parentPlace   Place?  @relation("PlaceHierarchy", fields: [parentPlaceId], references: [id])
  places        Place[] @relation("PlaceHierarchy")

  clientContracts ClientContract[]
  Zone            Zone[]
}

model Service {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  description     String
  clientContracts ClientContract[]
}

model Client {
  id            Int            @id @default(autoincrement())
  firstName     String         @db.VarChar(280)
  lastName      String         @db.VarChar(280)
  document      String         @db.VarChar(100)
  phone         String         @db.VarChar(100)
  address       String         @db.VarChar(255)
  email         String?        @db.VarChar(255)
  clientAccount ClientAccount?
}

model Hardware {
  id                Int                 @id @default(autoincrement())
  model             String              @db.VarChar(255)
  name              String              @db.VarChar(255)
  details           String?
  hardwareOnClients HardwareOnClients[]
  hardwareOnZones   HardwareOnZones[]
}

model Zone {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  code String @unique @db.VarChar(255)

  place           Place             @relation(fields: [placeId], references: [id])
  placeId         Int
  hardwareOnZones HardwareOnZones[]
}

model Invoice {
  id             Int      @id @default(autoincrement())
  generationDate DateTime
  periodStart    DateTime
  periodEnd      DateTime
  paymentDate    DateTime
  suspensionDate DateTime
  value          Float
  adjustment     Float
  status         Int

  contractId Int
  contract   ClientContract @relation(fields: [contractId], references: [id])
}

// ============================ RELATION TABLES ===============================

model ApisOnRoles {
  api   Api @relation(fields: [apiId], references: [id])
  apiId Int

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  get    Boolean @default(false)
  post   Boolean @default(false)
  delete Boolean @default(false)

  @@id([apiId, roleId])
}

model HardwareOnZones {
  id         Int      @id @default(autoincrement())
  hardware   Hardware @relation(fields: [hardwareId], references: [id])
  hardwareId Int

  zone   Zone @relation(fields: [zoneId], references: [id])
  zoneId Int

  startDate DateTime
  endDate   DateTime?
}

model HardwareOnClients {
  id         Int      @id @default(autoincrement())
  hardware   Hardware @relation(fields: [hardwareId], references: [id])
  hardwareId Int

  clientAccount   ClientAccount @relation(fields: [clientAccountId], references: [id])
  clientAccountId Int

  startDate DateTime
  endDate   DateTime?
}

model ClientAccount {
  id     Int     @id @default(autoincrement())
  status Boolean @default(false)

  client            Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId          Int                 @unique
  clientContracts   ClientContract[]
  hardwareOnClients HardwareOnClients[]
}

model ClientContract {
  id        Int       @id @default(autoincrement())
  value     Float
  status    Boolean
  dateStart DateTime
  dateEnd   DateTime?

  clientAccountId Int
  clientAccount   ClientAccount @relation(fields: [clientAccountId], references: [id])

  placeId Int
  place   Place @relation(fields: [placeId], references: [id])

  serviceId Int
  service   Service   @relation(fields: [serviceId], references: [id])
  invoices  Invoice[]
}
